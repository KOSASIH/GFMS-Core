from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
import os

# Fungsi untuk menghasilkan kunci AES-256
def generate_aes_key(password: bytes, salt: bytes) -> bytes:
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,  # 256-bit key
        salt=salt,
        iterations=100000,
    )
    return kdf.derive(password)

# Fungsi untuk enkripsi AES-256-GCM
def encrypt_aes_gcm(data: bytes, key: bytes):
    iv = os.urandom(12)  # Nonce/IV 12 bytes untuk GCM
    cipher = Cipher(algorithms.AES(key), modes.GCM(iv))
    encryptor = cipher.encryptor()
    ciphertext = encryptor.update(data) + encryptor.finalize()
    return iv, ciphertext, encryptor.tag

# Fungsi untuk dekripsi AES-256-GCM
def decrypt_aes_gcm(iv: bytes, ciphertext: bytes, tag: bytes, key: bytes):
    cipher = Cipher(algorithms.AES(key), modes.GCM(iv, tag))
    decryptor = cipher.decryptor()
    return decryptor.update(ciphertext) + decryptor.finalize()

# Contoh penggunaan
password = b's3cure_password'
salt = os.urandom(16)  # Salt acak
key = generate_aes_key(password, salt)

data = b"Ini adalah data sensitif"
iv, ciphertext, tag = encrypt_aes_gcm(data, key)
print("Ciphertext:", ciphertext)

decrypted_data = decrypt_aes_gcm(iv, ciphertext, tag, key)
print("Decrypted:", decrypted_data)
